CONFIGURATION

Configuration of gladd happens in /etc/gladd.conf.

Any line beginning with a # is deemed to be a comment and will be ignored by
the configration parser.

After making changes to gladd.conf, a "gladd reload" will trigger a HUP of the
application.  If the new configuration is valid, it will be loaded.  It will
be ignored if not.

== Global Settings ==

daemon
0 = run gladd as a daemon (default).  1 = do not daemonize.

debug

0 = off (default), 1 = on.  With debug on, gladd will output a lot of
information to syslog.

encoding
Character encoding to use.  Default UTF-8.

dropprivs
0 = do not drop priviliges
1 = drop privileges (default)

Sometimes it is useful to run gladd with root privileges, so that it can, for
example, bind to a privileged port, such as 80 or 443.  To achieve this, set
the binary to be setuid root (the default make install does this) and then run
gladd as a non-privileged user.

The latter is important.  When gladd drops privs it will check to ensure that
this worked, and that it can't get them back again.  If you try to run gladd
*as* root, with dropprivs turned on, it will complain that it was unable to
drop privs and fail to start.

gladd drops privs immediately after binding to a port.  If, for some reason
you do *not* want to do this (you really want to run gladd as root with all
the risks that involves), then set this option to 0.

One reason for running as root may be that you are running an older version of
PAM with a pam_unix that requires root privs.  This can be used as a
(temporary) hack to get around this while you find a newer PAM or alternate
means of authentication.

pipelining
0 = off
1 = on (default)
When on, both persistent TCP connections and HTTP pipelining are enabled.
When off, only a single HTTP request will be handled per connection, after
which the connection will be closed (as in HTTP/1.0).

port
TCP port to listen on.  Default 8080.

secretkey

The secret key to use when generating session cookies.  If you run multiple
gladds, say, behind a load-balancer (or round robin DNS) then set all gladds
in the cluster to use the same secretkey so they can read and verify each
other's cookies.  Mmmm.  Cookies.

How long should the key be?  Presently gladd uses a blowfish cipher, which can
use up to 448bits (56 bytes), so you are encouraged to use *at least* 56 bytes
for the key.  It doesn't matter if it is longer than 56 bytes (it will be
truncated), but the key should not be shorter than this.

If a secretkey is not set, gladd will generate a random one on startup.
Obviously if you restart gladd using a random key any previously issued
cookies will immediately become invalid.

ssl
0 = off (default)
1 = on, allow SSLv2,SSLv3,tls
2 = on, SSLv2 disabled
3 = on, SSLv3 disabled (TLS 1.x only)
4 = on, TLSv1.0 disabled (TLS 1.1+ only)
5 = on, TLSv1.1 disabled (TLS 1.2+ only)

Turn on to enable ssl support.  Requires that gladd be configured and built
with ssl support.  Gladd has support for both gnutls and openssl.  Of the two,
openssl is the most tested.  GnuTLS 3.0+ works, I believe.  I've seen problems
with GnuTLS 2.x and would not recommend its use.  If you enable ssl, you will
require ssl-ca, ssl-key, ssl-cert and ssl-crl also.

ssl-ca
(required for ssl=1)
Full path to your CA certificates file.
eg. /etc/ssl/certs/ca-certificates.crt

ssl-key
(required for ssl=1)
Full path to your SSL key.

ssl-cert
(required for ssl=1)
Full path to your SSL certificate.

ssl-crl
(required for ssl=1)
Full path to your SSL certificate revocation list.

ssl-ciphers
(optional)
list of ciphers to support in openssl-readable format
eg.
ssl-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
(This is the default)

ssl-compression
Default: 0
0 = off (default)
1 = on (not recommended due to CRIME vulnerability)
Turn SSL compression on/off.

uploadmax
Max size (MB) of file upload to accept.
Default: 0 (unlimited)

url_default
Default: index.html
Default url to serve up if a client requests / 

x-forward
0 = off (default)
1 = on

If enabled, use the X-Forwarded-For header as the IP address of the client
instead of the IP address of the connection.  Useful if gladd is sitting
behind a proxy.

xmlpath
Default: .
Path to root of xml files for use with xml/xslt-dependent url types.

== Virtualhosts ==

domain
default: *
Setting domain affects all url configuration lines after it.  Urls will only match if the path and domain both agree.  domain can use wildcards such as *.example.com or example.*.uk
Used in conjunction with the $fqdn macro virtualhosts can be set up.  eg.

domain *
url static GET /* /var/www/$fqdn/

# The parts of the domain are available as separate macros $d0 .. $n
# ie. 
domain example.com
url static GET /* /var/www/com/example/
# could be written as:
domain example.com
url static GET /* /var/www/$d1/$d0/

# The document_root directive can be used to avoid repetition:
document_root /var/www
url static GET /one /one/
url static GET /two /two/

== Databases ==

Definitions of databases for use with other configuration options.

Database definitions take the form:
db	<alias> <type> <host> <database> [<username>] [<password>]

eg.
db      gb	pg      localhost	gladbooks
db      db_test_my  my      localhost       gladd_test  myuser  mypass
db      ldap2       ldap    ldap://ldap.example.com dc=example,dc=com myuser mypass

<alias> - a convenient name to refer to this database as
<type>  - pg=postgresql, my=mysql/mariadb, ldap=openldap, tds=sybase/sqlserver
<host>  - hostname or IP address of server to connect to
<database> - the database to work with
<username> / <password> - credentials to use.  Not supported for pg.

== URLs ==

Here's where we define our application API.  There are several url types
available.  Urls are matched in the order they are defined.  The first line
where both the method and the url match will be used to handle the url.

The form is:
url <type> <method> <url> <path> <db> <view>

<type>
Can be one of:
static, sqlview, xslpost, xslt, upload, plugin, proxy, rewrite.  See URL TYPES (below).

<method>
The HTTP method to use.  GET, POST, PULL, DELETE, BREW etc.

<url>
The url to match.

<db>
The database alias to use (must be defined in Databases - see above).

<view>
The sql alias to user (must be defined in Views - see below).

=== URL Types ===

static

Serve static files.
url static <method> <path>

eg.
url static GET /css/* /path/to/css/files/


git

serve files directly from git
url git <method> <repo> <branch>
url git GET /* /path/to/git/repo/.git master


sqlview

Serve up results of an SQL query or ldap search as XML.
url sqlview <method> <url> <database> <view>
eg.
url sqlview GET /users/  db1  usersql

This will serve up the results of the query with alias "usersql" on database
"db1".  usersql could be defined like:

sql usersql SELECT * FROM user;


xslpost

Take the XML from a POST, check it matches an XSD schema, transform it into
SQL using XSLT, and execute the resultant SQL on a database.

TODO: insert some description here of {xmlpath}/{create,update}.{xml,xsd,xsl}

xslt
Like a sqlview, but transform the resulting XML using XSLT (view.xsl).

upload

Handle file uploads from the browser using multipart MIME.  Write the files to
the path specified, named according to their SHA1 sum.  Return the SHA1 to the
client.

url upload <method> <url> <path>

eg.
url upload PUT /filestore/ /path/to/filestore/


plugin

Execute a plugin.  If method is POST, pass the POST data to the stdin of the
plugin, returning the results from stdout back to the client.  If method is
GET, just execute the plugin and return the output.  Plugins can be written in
any language.

url plugin <method> <url> <path_to_plugin>


proxy

Fetch the url and return it to the client.

eg.
url proxy GET /remote/* http://example.com/

If the client requests /remote/somefile.txt gladd will fetch
http://example.com/somefile.txt and return it.

rewrite

Like proxy, but rewrite the url first, using $0, $1 etc to represent the
first, second segments of the request respectively.

eg.
url rewrite GET /remote/*/ http://example.com/$1

If the client requests /remote/fred/ gladd will fetch http://example.com/fred
and return it to the client.

== Access Control ==

Users and Groups can be defined in gladd.conf for testing.  Passwords for
users are plaintext so this should not be used in production.

user	<username>	<unecrypted password>

group	<groupname>	<members>

members is a comma-separated list of usernames.

acls are defined with the following syntax:

acl <method> <url> <control> <auth>

method 	- HTTP method (eg. GET, POST, PUT, DELETE, *)

url	- url to restrict - supports * as a wildcard

control	- allow, deny, require, sufficient, params
	allow 	=> allow access with no further checks
	deny	=> return 403 Forbidden with no further checks
	require	=> this rule MUST pass, or a 401 Unauthorized response is
		   returned.  No further acls are processed.
	sufficient => if this rule passes, access is granted and no further
	           checks are performed.
	params	=> these appear before the main acls and are used for any 
	           parameters that we want to set which may affect how the
		   url is handled.  Valid are:
		   nocache - add headers to response requesting url is not
		   	cached.
		   cookie:session - set a session cookie in response, if auth
		   	succeeds.
                   sendheader:<headerstring> - send an arbitrary header string
                        with the response. eg.
                        sendheader:Content-Security-Policy: frame-ancestors 'none'
	optional => the acl is checked as normal, but the outcome does not
		    directly affect the outcome of the acl stack.  This is 
		    mostly useful in conjunction with a success/fail argument.
	The sufficient, optional and required acls may have
	[condition=n] appended, where condition is either 'success' or 'fail'
	and n is the number of acls to skip forward if the condition is met.
	eg. optional[success=2] will skip forward 2 acls.  [success=1] is the
	same as the default (ie. process the next acl as normal).

auth	- the auth alias to use (see below) for authentication and/or
	authorization.  If '*', and control is 'sufficient' then each auth
	method is attempted in turn and only one needs to succeed.  If '*',
	and control is 'require' then every auth method is attempted in turn
	and ALL must succeed for access to be granted.


TODO: examples


Auth Definitions

There are various types of auth available.  Auth here can refer to either
authentication (who one is) and authorization (what one is permitted to do).
Auth lines take the form:

auth <alias> <type> <arg1> <arg2> <arg3>

alias	- a convenient name to refer to this by.  Used in acls (above).
type	- user, group, cookie, ldap, pam
arg$	- either an argument used by the type, or '*'

eg.

Check username and password matches one of the locally defined ones in
gladd.conf:
auth	eg1	user	*	*	*

Ensure user is in group "wheel":
auth	eg2	group	wheel	*	*

Validate session cookie and obtain username:
auth	eg3	cookie	*	*	*

Groups support url tokens in their names.  $0-$n will be replaced by that segment of the request URL (https://example.com/$0/$1/../$n/).
auth	eg4	group	org$0	*	*

Bind to ldap directory ldap1 (defined in databases - see above), using the
username and password supplied:
auth	eg5	ldap	ldap1	ld_auth	uid

Authenticate against PAM service "login"
auth	eg6	pam	login	*	*

TODO: 
acl, auth, user, group etc.  PAM, nsswitch, ldap.  Group variables.

== Views ==

sql <alias> sql

Multiline config

begin sql
	SELECT * FROM blah
	ORDER BY blerk
end sql


More to come... watch this space!

